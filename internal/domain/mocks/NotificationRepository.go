// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "github.com/kkcaz/shu-dades-server/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: notification
func (_m *NotificationRepository) Add(notification models.Notification) error {
	ret := _m.Called(notification)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Notification) error); ok {
		r0 = rf(notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: userId, notificationId
func (_m *NotificationRepository) Delete(userId string, notificationId string) error {
	ret := _m.Called(userId, notificationId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, notificationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: userId
func (_m *NotificationRepository) Get(userId string) ([]models.Notification, error) {
	ret := _m.Called(userId)

	var r0 []models.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Notification, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Notification); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
