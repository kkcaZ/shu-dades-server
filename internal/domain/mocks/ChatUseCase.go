// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "github.com/kkcaz/shu-dades-server/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// ChatUseCase is an autogenerated mock type for the ChatUseCase type
type ChatUseCase struct {
	mock.Mock
}

// CreateChat provides a mock function with given fields: participants
func (_m *ChatUseCase) CreateChat(participants []string) (*models.Chat, error) {
	ret := _m.Called(participants)

	var r0 *models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (*models.Chat, error)); ok {
		return rf(participants)
	}
	if rf, ok := ret.Get(0).(func([]string) *models.Chat); ok {
		r0 = rf(participants)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(participants)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChat provides a mock function with given fields: chatId
func (_m *ChatUseCase) GetChat(chatId string) (*models.Chat, error) {
	ret := _m.Called(chatId)

	var r0 *models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Chat, error)); ok {
		return rf(chatId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Chat); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatParticipantIds provides a mock function with given fields: chatId
func (_m *ChatUseCase) GetChatParticipantIds(chatId string) ([]string, error) {
	ret := _m.Called(chatId)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(chatId)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatThumbnails provides a mock function with given fields: userId
func (_m *ChatUseCase) GetChatThumbnails(userId string) ([]models.ChatThumbnail, error) {
	ret := _m.Called(userId)

	var r0 []models.ChatThumbnail
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.ChatThumbnail, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []models.ChatThumbnail); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ChatThumbnail)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: chatId, message, userId
func (_m *ChatUseCase) SendMessage(chatId string, message string, userId string) error {
	ret := _m.Called(chatId, message, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(chatId, message, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatUseCase creates a new instance of ChatUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatUseCase {
	mock := &ChatUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
