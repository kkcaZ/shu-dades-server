// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "github.com/kkcaz/shu-dades-server/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

// AddMessage provides a mock function with given fields: chatId, message
func (_m *ChatRepository) AddMessage(chatId string, message models.Message) error {
	ret := _m.Called(chatId, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.Message) error); ok {
		r0 = rf(chatId, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateChat provides a mock function with given fields: chat
func (_m *ChatRepository) CreateChat(chat models.Chat) error {
	ret := _m.Called(chat)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Chat) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllChatThumbnails provides a mock function with given fields:
func (_m *ChatRepository) GetAllChatThumbnails() ([]models.ChatThumbnail, error) {
	ret := _m.Called()

	var r0 []models.ChatThumbnail
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.ChatThumbnail, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.ChatThumbnail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ChatThumbnail)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChat provides a mock function with given fields: chatId
func (_m *ChatRepository) GetChat(chatId string) (*models.Chat, error) {
	ret := _m.Called(chatId)

	var r0 *models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Chat, error)); ok {
		return rf(chatId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Chat); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
