// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "github.com/kkcaz/shu-dades-server/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// AuthUseCase is an autogenerated mock type for the AuthUseCase type
type AuthUseCase struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: username, password
func (_m *AuthUseCase) Authenticate(username string, password string) (*models.UserClaim, error) {
	ret := _m.Called(username, password)

	var r0 *models.UserClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.UserClaim, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.UserClaim); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUserIds provides a mock function with given fields:
func (_m *AuthUseCase) GetAllUserIds() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetAllUsersInfo provides a mock function with given fields:
func (_m *AuthUseCase) GetAllUsersInfo() ([]models.UserInfo, error) {
	ret := _m.Called()

	var r0 []models.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.UserInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.UserInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: token
func (_m *AuthUseCase) GetUser(token string) (*models.UserClaim, error) {
	ret := _m.Called(token)

	var r0 *models.UserClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.UserClaim, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *models.UserClaim); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: userId
func (_m *AuthUseCase) GetUserById(userId string) (*models.User, error) {
	ret := _m.Called(userId)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenIsValid provides a mock function with given fields: token
func (_m *AuthUseCase) TokenIsValid(token string) bool {
	ret := _m.Called(token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewAuthUseCase creates a new instance of AuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUseCase {
	mock := &AuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
